# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
#' The application User-Interface
#'
#' @param request Internal parameter for `{shiny}`.
#'     DO NOT REMOVE.
#' @import shiny
#' @noRd
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
fluidPage(
shinyWidgets::useShinydashboard(),
tags$script(src = "https://kit.fontawesome.com/7ad3cfe706.js"),
tags$head(
tags$style("html, body { height: 100%; width: 100%}")
),
fluidRow(
column(width=6,
tagList(
tags$div(style = "overflow-y: scroll; height: 1200px;",
actionButton('A', '‘Dry’ community events focussed on health promotion', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('B', 'Sporting groups and participation', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('C', 'After-school activities and groups for youths', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('D', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('E', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('F', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('G', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('H', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('I', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('J', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('K', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('L', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('M', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('N', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('O', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('P', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('Q', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('R', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('S', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb")),
actionButton('T', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.', width='32%', class="myButton", icon = icon("lightbulb", class="myLightbulb"))
)
)
),
column(width=6,
shinydashboard::box(width=12,
tags$div(style="height:100px; line-height: 100px; text-align: center;",
h2(textOutput("text"))
),
hr(),
column(width=4,
shinydashboard::valueBoxOutput("alcoholBox", width=12),
htmlOutput("alcoholSummary")
),
column(width=4,
shinydashboard::valueBoxOutput("tobaccoBox", width=12),
),
column(width=4,
shinydashboard::valueBoxOutput("cannabisBox", width=12),
),
fluidRow(
column(width=3,
plotOutput("waffle"),
h4("Community survey outcome")
),
column(width=9,
plotOutput("studiesPlot")
)
)
),
shinydashboard::box(width=12, height="50%", collapsible = TRUE, collapsed = TRUE)
)
)
# absolutePanel(id = "panel2",
#               top = "0%", left = "40%", height = "60%", width = "60%", right = "0%",bottom = "40%",
#               tags$img(src="https://picsum.photos/1100/100"),
#               h2(textOutput("text")),
#               shinydashboard::valueBoxOutput("alcoholBox"),
#               shinydashboard::valueBoxOutput("tobaccoBox"),
#               shinydashboard::valueBoxOutput("cannabisBox"),
#               column(width=3,
#                 plotOutput("waffle"),
#                 h4("Community survey outcome")
#               )
#
#
# ),
# shinydashboard::box("Well head", width=6, collapsible = TRUE)
# absolutePanel(id = "panel3",
#               top = "60%", left = "40%", height = "40%", width = "60%", right = "0%",bottom = "0",
#
# )
#
#       column(width=6,
#         wellPanel(id="menu", style="overflow-y: scroll;",
#
#         ) # closes wellPanel
#       ), # Closes column
#
#       column(width=6,
#
#              fluidRow(
#
#                h2("A Random Plot"),
#                plotOutput("plot"),
#                h2("A Random Text"),
#                tableOutput("text")
#
#              ),
#
#              fluidRow(
#
#                h2("A Random DT"),
#                DT::DTOutput("data_table"),
#
#              )
#
#              )
) # Closes fluidPage
) # Closes tagList
} # Closes app_ui
#' Add external Resources to the Application
#'
#' This function is internally used to add external
#' resources inside the Shiny application.
#'
#' @import shiny
#' @importFrom golem add_resource_path activate_js favicon bundle_resources
#' @noRd
golem_add_external_resources <- function() {
add_resource_path(
"www",
app_sys("app/www")
)
tags$head(
favicon(),
bundle_resources(
path = app_sys("app/www"),
app_title = "preventionMenu"
)
# Add here other external resources
# for example, you can add shinyalert::useShinyalert()
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Read the raw data
menuData <- read.csv("data-raw/menu-data.csv")
menuData$alcoholUse
menuData$alcoholHarm
menuData$alcoholBehav
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
icon("thought-bubble")
icon("person-falling")
icon("idea")
icon("head")
icon("face-thinking")
icon("sparkle")
icon("person-praying")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
icon('head-side-medical')
icon('brain')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the applicationa
run_app()
